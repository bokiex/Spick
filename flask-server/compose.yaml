volumes:
  rabbitmq_data:
  event_mysql_data:
  reservation_mysql_data:

networks:
  spick:
    driver: bridge
    name: spick
    # external: true

services:
  #######################################
  # Rabbit MQ
  #######################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - spick

  #######################################
  # Event  Microservice
  #######################################
  event:
    container_name: event
    build:
      context: ./simple_services/event/
      dockerfile: Dockerfile
    networks:
      - spick
    env_file:
      - .env
    ports:
      - "8100:8100"
    restart: always
    depends_on:
      event-mysql:
        condition: service_healthy

  event-mysql:
    networks:
      - spick
    container_name: event-mysql
    build: ./simple_services/event/mysql
    volumes:
      - event_mysql_data:/var/lib/mysql
    ports:
      - "8889:3306"
    env_file:
      - .env
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p root",
        ]
      interval: 1s
      retries: 50

  #######################################
  # User Microservice
  #######################################
  user:
    container_name: user
    build:
      context: ./simple_services/user/
      dockerfile: Dockerfile
    networks:
      - spick
    env_file:
      - .env
    ports:
      - "8101:8101"
    restart: always
    depends_on:
      user-mysql:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--include",
          "-request",
          "GET",
          "http://localhost:8101/online",
          "||",
          "exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  user-mysql:
    networks:
      - spick
    container_name: user-mysql
    build: ./simple_services/user/mysql
    env_file:
      - .env
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p root",
        ]
      interval: 1s
      retries: 50

  #######################################
  # Recommendation Microservice
  #######################################
  recommendation:
    container_name: recommendation
    build:
      context: ./simple_services/recommendation
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8102:8102"
    restart: always

  #######################################
  # Authentication Microservice
  #######################################
  authentication:
    container_name: authentication
    build:
      context: ./simple_services/authentication/
      dockerfile: Dockerfile
    networks:
      - spick
    env_file:
      - .env
    ports:
      - "8103:8103"
    restart: always
    depends_on:
      user:
        condition: service_healthy

  #######################################
  # Reservation Microservice
  #######################################
  reservation:
    container_name: reservation
    build:
      context: ./simple_services/reservation/
      dockerfile: Dockerfile
    networks:
      - spick
    env_file:
      - .env
    ports:
      - "8104:8104"
    restart: always
    depends_on:
      reservation-mysql:
        condition: service_healthy

  reservation-mysql:
    networks:
      - spick
    container_name: reservation-mysql
    build: ./simple_services/reservation/mysql
    volumes:
      - reservation_mysql_data:/var/lib/mysql
    env_file:
      - .env
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p root",
        ]
      interval: 1s
      retries: 50


  #######################################
  # User Schedule Microservice
  #######################################
  user_schedule:
    container_name: user_schedule
    build:
      context: ./simple_services/user_schedule/
      dockerfile: Dockerfile
    networks:
      - spick
    env_file:
      - .env
    ports:
      - "8105:8105"
    restart: always
    depends_on:
      user_schedule-mysql:
        condition: service_healthy

  user_schedule-mysql:
    networks:
      - spick
    container_name: user_schedule-mysql
    build: ./simple_services/user_schedule/mysql
    env_file:
      - .env
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p root",
        ]
      interval: 1s
      retries: 50


  #######################################
  # Optimizer Microservice
  #######################################
  optimizer:
    container_name: optimizer
    build:
      context: ./simple_services/optimizer/
      dockerfile: Dockerfile
    networks:
      - spick
    ports:
      - "8106:8106"
    restart: always
    depends_on:
      - user_schedule

  #######################################
  # Notification Microservice
  #######################################
  notification:
    container_name: notification
    build:
      context: ./simple_services/notification/
      dockerfile: Dockerfile
    networks:
      - spick
    restart: always

  #######################################
  # Error Microservice
  #######################################
  error:
    container_name: error
    build:
      context: ./simple_services/error/
      dockerfile: Dockerfile
    networks:
      - spick
    restart: always
