volumes:
    rabbitmq_data:
    event_mysql_data:
    user_mysql_data:
    reservation_mysql_data:
    user_schedule_mysql_data:
networks:
    spick:
        driver: bridge
        name: spick
        # external: true

services:
    #######################################
    # Rabbit MQ
    #######################################
    rabbitmq:
        container_name: rabbitmq
        image: rabbitmq:3-management
        hostname: esd-rabbit
        restart: always
        ports:
            - "5672:5672"
            - "15672:15672"
        volumes:
            - ./rabbitmq.config:/etc/rabbitmq/rabbitmq.config
            - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
            - rabbitmq_data:/var/lib/rabbitmq
        networks:
            - spick

    #######################################
    # Event Microservice
    #######################################
    event-mysql:
        networks:
            - spick
        container_name: event-mysql
        build: ./simple_services/event/mysql
        ports:
            - "8889:3306"
        env_file:
            - .env
        volumes:
            - event_mysql_data:/var/lib/mysql
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p root"]
            interval: 1s
            retries: 50
    event:
        container_name: event
        build:
            context: ./simple_services/event/
            dockerfile: Dockerfile
        networks:
            - spick
        env_file:
            - .env
        ports:
            - "8100:8100"
        restart: always
        depends_on:
            event-mysql:
                condition: service_healthy

    #######################################
    # User Microservice
    #######################################
    user-mysql:
        networks:
            - spick
        container_name: user-mysql
        build: ./simple_services/user/mysql
        ports:
            - "9000:3306"
        env_file:
            - .env
        volumes:
            - user_mysql_data:/var/lib/mysql
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p root"]
            interval: 1s
            retries: 50
    user:
        container_name: user
        build:
            context: ./simple_services/user/
            dockerfile: Dockerfile
        networks:
            - spick
        env_file:
            - .env
        ports:
            - "8101:8101"
        restart: always
        depends_on:
            user-mysql:
                condition: service_healthy

    #######################################
    # Recommendation Microservice
    #######################################
    recommendation:
        networks:
            - spick
        restart: always
        container_name: recommendation
        build:
            context: ./simple_services/recommendation
            dockerfile: Dockerfile
        env_file:
            - .env
        ports:
            - "8102:8102"

    #######################################
    # Authentication Microservice
    #######################################
    authentication:
        container_name: authentication
        build:
            context: ./simple_services/authentication/
            dockerfile: Dockerfile
        networks:
            - spick
        env_file:
            - .env
        ports:
            - "8103:8103"
        restart: always
        depends_on:
            user:
                condition: service_started

    #######################################
    # Reservation Microservice
    #######################################
    reservation-mysql:
        networks:
            - spick
        container_name: reservation-mysql
        build: ./simple_services/reservation/mysql
        env_file:
            - .env
        volumes:
            - reservation_mysql_data:/var/lib/mysql
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p root"]
            interval: 1s
            retries: 50

    reservation:
        container_name: reservation
        build:
            context: ./simple_services/reservation/
            dockerfile: Dockerfile
        networks:
            - spick
        env_file:
            - .env
        ports:
            - "8104:8104"
        restart: always
        depends_on:
            reservation-mysql:
                condition: service_healthy

    #######################################
    # User Schedule Microservice
    #######################################
    user_schedule-mysql:
        networks:
            - spick
        container_name: user_schedule-mysql
        build: ./simple_services/user_schedule/mysql
        env_file:
            - .env
        volumes:
            - user_schedule_mysql_data:/var/lib/mysql
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p root"]
            interval: 1s
            retries: 50

    user_schedule:
        container_name: user_schedule
        build:
            context: ./simple_services/user_schedule/
            dockerfile: Dockerfile
        networks:
            - spick
        env_file:
            - .env
        ports:
            - "8105:8105"
        restart: always
        depends_on:
            user_schedule-mysql:
                condition: service_healthy
                
    #######################################
    #Optimizer Microservice
    #######################################
    optimizer:
        container_name: optimizer
        build:
            context: ./simple_services/optimizer/
            dockerfile: Dockerfile
        env_file:
            - .env
        networks:
            - spick
        ports:
            - "8106:8106"
        restart: always
        depends_on:
            - user_schedule

    #######################################
    # Error Microservice
    #######################################
    error:
        container_name: error
        build:
            context: ./simple_services/error/
            dockerfile: Dockerfile
        env_file:
            - .env
        environment:
            PYTHONUNBUFFERED: 1
        networks:
            - spick
        restart: always
        depends_on:
            rabbitmq:
                condition: service_started

    #######################################
    # Notification Microservice
    #######################################
    notification:
        container_name: notification
        build:
            context: ./simple_services/notification/
            dockerfile: Dockerfile
        env_file:
            - .env
        environment:
            PYTHONUNBUFFERED: 1
        networks:
            - spick
        restart: always
        depends_on:
            rabbitmq:
                condition: service_started

    #######################################
    # Manage Events Complex
    #######################################
    manage_events:
        container_name: manage_events
        build:
            context: ./complex_services/manage_events/
            dockerfile: Dockerfile
        ports:
            - "8200:8200"
        env_file:
            - .env
        networks:
            - spick
        restart: always
        depends_on:
            user:
                condition: service_started
            event:
                condition: service_started
            recommendation:
                condition: service_started
            rabbitmq:
                condition: service_started

    #######################################
    # RSVP Complex
    #######################################
    rsvp:
        container_name: rsvp
        build:
            context: ./complex_services/rsvp
            dockerfile: Dockerfile
        restart: always
        env_file:
            - .env
        ports:
            - "8201:8201"
        depends_on:
            user:
                condition: service_started
            event:
                condition: service_started
            user_schedule:
                condition: service_started
            optimizer:
                condition: service_started
            rabbitmq:
                condition: service_started
        networks:
            - spick

    #######################################
    # PostgreSQL: The database used by Kong
    #######################################
    # kong-database:
    #     image: postgres:12
    #     restart: always
    #     networks:
    #     - spick
    #     environment:
    #         POSTGRES_DB: kong
    #         POSTGRES_USER: kong
    #         POSTGRES_PASSWORD: password
    #     ports:
    #     - "5432:5432"
    #     healthcheck:
    #         test: ["CMD", "pg_isready", "-U", "kong"]
    #         interval: 10s
    #         timeout: 5s
    #         retries: 5
    #     volumes:
    #     - dbdata:/var/lib/postgresql/data

    #######################################
    # Kong database migration
    #######################################
    kong-migration:
        image: kong/kong-gateway:3.2.2.5
        command: "kong migrations bootstrap"
        restart: on-failure
        networks:
        - spick
        environment:
            KONG_DATABASE: "off"
            # KONG_PG_HOST: kong-database
            # KONG_PG_USER: kong
            # KONG_PG_PASSWORD: password
        # depends_on:
        # - kong-database
        
    #######################################
    # Kong: The API Gateway
    #######################################
    kong:
        # image: kong:3.6.0-ubuntu
        restart: always
        networks:
        - spick
        build:
            context: ./kong/
            dockerfile: Dockerfile
        environment:
            KONG_DATABASE: "off"
            KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yaml
            KONG_PG_HOST: kong-database
            KONG_PG_USER: kong
            KONG_PG_PASSWORD: password
            KONG_PROXY_ACCESS_LOG: /dev/stdout
            KONG_ADMIN_ACCESS_LOG: /dev/stdout
            KONG_PROXY_ERROR_LOG: /dev/stderr
            KONG_ADMIN_ERROR_LOG: /dev/stderr
            KONG_ADMIN_LISTEN: 0.0.0.0:8001
            KONG_ADMIN_GUI_URL: http://localhost:8002
        depends_on:
          - kong-migration
        volumes:
        - ./kong/kong.yaml:/etc/kong/kong.yaml
        ports: # https://docs.konghq.com/gateway/latest/production/networking/default-ports/
        - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
        - "8443:8443" # Takes incoming HTTPS traffic from Consumers, and forwards it to upstream Services.
        - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
        - "8444:8444" # Admin API. Listens for calls from the command line over HTTPS.
        - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.
        - "8445:8445" # Kong Manager (GUI). Listens for HTTPS traffic.
        - "8003:8003" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
        - "8446:8446" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
        - "8004:8004" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
        - "8447:8447" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.